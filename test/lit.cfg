# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.
import os
import site

site.addsitedir(os.path.dirname(__file__))
import test_config.config

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

# name: The name of this test suite.
config.name = 'template-tool'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.cpp']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

loaded_site_cfg = getattr(config, 'loaded_site_config', False)
if not loaded_site_cfg:
    import test_config.config
    test_config.config.loadSiteConfig(lit_config, config, 'template_test_site_config',
                                      'TEMPLATE_TEST_SITE_CONFIG')

# Infer the test_exec_root from the libcxx_object root.
obj_root = getattr(config, 'build_root', None)
# Check that the test exec root is known.
if obj_root is None:
    obj_root = getattr(config, 'build_root', None)
    if obj_root is None:
        import tempfile
        obj_root = tempfile.mkdtemp(prefix='libcxx-testsuite-')
        lit_config.warning('Creating temporary directory for object root: %s' %
                           obj_root)

config.test_exec_root = os.path.join(obj_root, 'test-exec')

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
configuration = test_config.config.Configuration(lit_config, config)
configuration.configure()
config.test_format = configuration.get_test_format()
